
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programleftPLUSMINUSleftTIMESDIVIDEASSIGN COMA DIFF DIVIDE ELSE ENDFILE EQUALS ID IF INT LBRACKET LKEY LOEQU LPAREN LTHAN MINUS MOEQU MTHAN NUM PLUS RBRACKET RETURN RKEY RPAREN SEMICOLON TIMES VOID WHILEprogram    : declaration_list     declaration_list    : declaration_list declaration\n                                | declaration                \n         declaration     : var_declaration\n                            | fun_declaration\n                            | ENDFILE\n         var_declaration : type_specifier ID SEMICOLON\n                            | type_specifier ID LBRACKET NUM RBRACKET SEMICOLON\n     \n            type_specifier  : INT\n                            | VOID \n    fun_declaration : type_specifier ID LPAREN params RPAREN compound_stmt params      : param_list\n                    | VOID\n     param_list      : param_list COMA param\n                        | param\n     param   : type_specifier ID\n                | type_specifier ID LBRACKET RBRACKET\n    compound_stmt : LKEY local_declarations statement_list RKEY local_declarations  : local_declarations var_declaration\n                            | empty\n     statement_list  : statement_list statement\n                        | empty\n     statement   : expression_stmt\n                    | compound_stmt\n                    | selection_stmt\n                    | iteration_stmt\n                    | return_stmt\n     expression_stmt  : expression SEMICOLON\n                        | SEMICOLON\n     selection_stmt  : IF LPAREN expression RPAREN statement\n                        | IF LPAREN expression RPAREN statement ELSE statement\n     iteration_stmt  : WHILE LPAREN expression RPAREN statement return_stmt     : RETURN SEMICOLON\n                        | RETURN expression SEMICOLON\n     expression      : var ASSIGN expression\n                        | simple_expression\n     var     : ID\n                | ID LBRACKET expression RBRACKET\n     simple_expression   : additive_expression relop additive_expression\n                            | additive_expression\n     relop   : LOEQU\n                | LTHAN\n                | MTHAN\n                | MOEQU\n                | EQUALS\n                | DIFF\n         additive_expression     : additive_expression addop term\n                                    | term \n         addop   : PLUS\n                    | MINUS\n     term    : term mulop factor\n                | factor \n         mulop   : TIMES\n                    | DIVIDE\n     factor  : LPAREN expression RPAREN\n                | var\n                | call\n                | NUM \n     call    : ID LPAREN args RPAREN  args    : arg_list\n                | empty\n     arg_list    : arg_list COMA expression\n                    | expression\n    empty :'
    
_lr_action_items = {'ENDFILE':([0,2,3,4,5,6,10,12,25,27,37,],[6,6,-3,-4,-5,-6,-2,-7,-8,-11,-18,]),'INT':([0,2,3,4,5,6,10,12,14,24,25,27,28,31,32,34,37,],[8,8,-3,-4,-5,-6,-2,-7,8,8,-8,-11,-64,8,-20,-19,-18,]),'VOID':([0,2,3,4,5,6,10,12,14,24,25,27,28,31,32,34,37,],[9,9,-3,-4,-5,-6,-2,-7,19,9,-8,-11,-64,9,-20,-19,-18,]),'$end':([1,2,3,4,5,6,10,12,25,27,37,],[0,-1,-3,-4,-5,-6,-2,-7,-8,-11,-18,]),'ID':([7,8,9,12,16,19,25,28,31,32,33,34,35,36,37,38,39,40,41,42,43,45,47,49,59,60,62,63,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,84,95,96,99,100,101,103,104,],[11,-9,-10,-7,22,-10,-8,-64,-64,-20,52,-19,-22,58,-18,-21,-23,-24,-25,-26,-27,-29,52,52,-28,52,52,-33,52,52,52,52,52,-41,-42,-43,-44,-45,-46,-49,-50,52,-53,-54,-34,52,52,52,-30,-32,52,-31,]),'SEMICOLON':([11,12,21,25,28,31,32,33,34,35,37,38,39,40,41,42,43,44,45,49,50,51,52,53,54,55,56,57,58,59,63,64,82,84,85,91,92,93,94,95,96,97,98,100,101,103,104,],[12,-7,25,-8,-64,-64,-20,45,-19,-22,-18,-21,-23,-24,-25,-26,-27,59,-29,63,-56,-36,-37,-40,-48,-52,-57,-58,12,-28,-33,84,-55,-34,-35,-39,-56,-47,-51,45,45,-38,-59,-30,-32,45,-31,]),'LBRACKET':([11,22,52,58,],[13,26,66,13,]),'LPAREN':([11,12,25,28,31,32,33,34,35,37,38,39,40,41,42,43,45,46,47,48,49,52,59,60,62,63,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,84,95,96,99,100,101,103,104,],[14,-7,-8,-64,-64,-20,47,-19,-22,-18,-21,-23,-24,-25,-26,-27,-29,60,47,62,47,67,-28,47,47,-33,47,47,47,47,47,-41,-42,-43,-44,-45,-46,-49,-50,47,-53,-54,-34,47,47,47,-30,-32,47,-31,]),'RKEY':([12,25,28,31,32,33,34,35,37,38,39,40,41,42,43,45,59,63,84,100,101,104,],[-7,-8,-64,-64,-20,37,-19,-22,-18,-21,-23,-24,-25,-26,-27,-29,-28,-33,-34,-30,-32,-31,]),'LKEY':([12,23,25,28,31,32,33,34,35,37,38,39,40,41,42,43,45,59,63,84,95,96,100,101,103,104,],[-7,28,-8,-64,-64,-20,28,-19,-22,-18,-21,-23,-24,-25,-26,-27,-29,-28,-33,-34,28,28,-30,-32,28,-31,]),'IF':([12,25,28,31,32,33,34,35,37,38,39,40,41,42,43,45,59,63,84,95,96,100,101,103,104,],[-7,-8,-64,-64,-20,46,-19,-22,-18,-21,-23,-24,-25,-26,-27,-29,-28,-33,-34,46,46,-30,-32,46,-31,]),'WHILE':([12,25,28,31,32,33,34,35,37,38,39,40,41,42,43,45,59,63,84,95,96,100,101,103,104,],[-7,-8,-64,-64,-20,48,-19,-22,-18,-21,-23,-24,-25,-26,-27,-29,-28,-33,-34,48,48,-30,-32,48,-31,]),'RETURN':([12,25,28,31,32,33,34,35,37,38,39,40,41,42,43,45,59,63,84,95,96,100,101,103,104,],[-7,-8,-64,-64,-20,49,-19,-22,-18,-21,-23,-24,-25,-26,-27,-29,-28,-33,-34,49,49,-30,-32,49,-31,]),'NUM':([12,13,25,28,31,32,33,34,35,37,38,39,40,41,42,43,45,47,49,59,60,62,63,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,84,95,96,99,100,101,103,104,],[-7,15,-8,-64,-64,-20,57,-19,-22,-18,-21,-23,-24,-25,-26,-27,-29,57,57,-28,57,57,-33,57,57,57,57,57,-41,-42,-43,-44,-45,-46,-49,-50,57,-53,-54,-34,57,57,57,-30,-32,57,-31,]),'RBRACKET':([15,26,50,51,52,53,54,55,56,57,82,85,86,91,92,93,94,97,98,],[21,30,-56,-36,-37,-40,-48,-52,-57,-58,-55,-35,97,-39,-56,-47,-51,-38,-59,]),'RPAREN':([17,18,19,20,22,29,30,50,51,52,53,54,55,56,57,61,67,81,82,83,85,87,88,89,90,91,92,93,94,97,98,102,],[23,-12,-13,-15,-16,-14,-17,-56,-36,-37,-40,-48,-52,-57,-58,82,-64,95,-55,96,-35,98,-60,-61,-63,-39,-56,-47,-51,-38,-59,-62,]),'COMA':([18,20,22,29,30,50,51,52,53,54,55,56,57,82,85,88,90,91,92,93,94,97,98,102,],[24,-15,-16,-14,-17,-56,-36,-37,-40,-48,-52,-57,-58,-55,-35,99,-63,-39,-56,-47,-51,-38,-59,-62,]),'ELSE':([37,39,40,41,42,43,45,59,63,84,100,101,104,],[-18,-23,-24,-25,-26,-27,-29,-28,-33,-34,103,-32,-31,]),'ASSIGN':([50,52,97,],[65,-37,-38,]),'TIMES':([50,52,54,55,56,57,82,92,93,94,97,98,],[-56,-37,79,-52,-57,-58,-55,-56,79,-51,-38,-59,]),'DIVIDE':([50,52,54,55,56,57,82,92,93,94,97,98,],[-56,-37,80,-52,-57,-58,-55,-56,80,-51,-38,-59,]),'LOEQU':([50,52,53,54,55,56,57,82,92,93,94,97,98,],[-56,-37,70,-48,-52,-57,-58,-55,-56,-47,-51,-38,-59,]),'LTHAN':([50,52,53,54,55,56,57,82,92,93,94,97,98,],[-56,-37,71,-48,-52,-57,-58,-55,-56,-47,-51,-38,-59,]),'MTHAN':([50,52,53,54,55,56,57,82,92,93,94,97,98,],[-56,-37,72,-48,-52,-57,-58,-55,-56,-47,-51,-38,-59,]),'MOEQU':([50,52,53,54,55,56,57,82,92,93,94,97,98,],[-56,-37,73,-48,-52,-57,-58,-55,-56,-47,-51,-38,-59,]),'EQUALS':([50,52,53,54,55,56,57,82,92,93,94,97,98,],[-56,-37,74,-48,-52,-57,-58,-55,-56,-47,-51,-38,-59,]),'DIFF':([50,52,53,54,55,56,57,82,92,93,94,97,98,],[-56,-37,75,-48,-52,-57,-58,-55,-56,-47,-51,-38,-59,]),'PLUS':([50,52,53,54,55,56,57,82,91,92,93,94,97,98,],[-56,-37,76,-48,-52,-57,-58,-55,76,-56,-47,-51,-38,-59,]),'MINUS':([50,52,53,54,55,56,57,82,91,92,93,94,97,98,],[-56,-37,77,-48,-52,-57,-58,-55,77,-56,-47,-51,-38,-59,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declaration_list':([0,],[2,]),'declaration':([0,2,],[3,10,]),'var_declaration':([0,2,31,],[4,4,34,]),'fun_declaration':([0,2,],[5,5,]),'type_specifier':([0,2,14,24,31,],[7,7,16,16,36,]),'params':([14,],[17,]),'param_list':([14,],[18,]),'param':([14,24,],[20,29,]),'compound_stmt':([23,33,95,96,103,],[27,40,40,40,40,]),'local_declarations':([28,],[31,]),'empty':([28,31,67,],[32,35,89,]),'statement_list':([31,],[33,]),'statement':([33,95,96,103,],[38,100,101,104,]),'expression_stmt':([33,95,96,103,],[39,39,39,39,]),'selection_stmt':([33,95,96,103,],[41,41,41,41,]),'iteration_stmt':([33,95,96,103,],[42,42,42,42,]),'return_stmt':([33,95,96,103,],[43,43,43,43,]),'expression':([33,47,49,60,62,65,66,67,95,96,99,103,],[44,61,64,81,83,85,86,90,44,44,102,44,]),'var':([33,47,49,60,62,65,66,67,68,69,78,95,96,99,103,],[50,50,50,50,50,50,50,50,92,92,92,50,50,50,50,]),'simple_expression':([33,47,49,60,62,65,66,67,95,96,99,103,],[51,51,51,51,51,51,51,51,51,51,51,51,]),'additive_expression':([33,47,49,60,62,65,66,67,68,95,96,99,103,],[53,53,53,53,53,53,53,53,91,53,53,53,53,]),'term':([33,47,49,60,62,65,66,67,68,69,95,96,99,103,],[54,54,54,54,54,54,54,54,54,93,54,54,54,54,]),'factor':([33,47,49,60,62,65,66,67,68,69,78,95,96,99,103,],[55,55,55,55,55,55,55,55,55,55,94,55,55,55,55,]),'call':([33,47,49,60,62,65,66,67,68,69,78,95,96,99,103,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'relop':([53,],[68,]),'addop':([53,91,],[69,69,]),'mulop':([54,93,],[78,78,]),'args':([67,],[87,]),'arg_list':([67,],[88,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> declaration_list','program',1,'p_program','makeParser.py',19),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','makeParser.py',24),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','makeParser.py',25),
  ('declaration -> var_declaration','declaration',1,'p_declaration','makeParser.py',33),
  ('declaration -> fun_declaration','declaration',1,'p_declaration','makeParser.py',34),
  ('declaration -> ENDFILE','declaration',1,'p_declaration','makeParser.py',35),
  ('var_declaration -> type_specifier ID SEMICOLON','var_declaration',3,'p_var_declaration','makeParser.py',41),
  ('var_declaration -> type_specifier ID LBRACKET NUM RBRACKET SEMICOLON','var_declaration',6,'p_var_declaration','makeParser.py',42),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','makeParser.py',51),
  ('type_specifier -> VOID','type_specifier',1,'p_type_specifier','makeParser.py',52),
  ('fun_declaration -> type_specifier ID LPAREN params RPAREN compound_stmt','fun_declaration',6,'p_fun_declaration','makeParser.py',57),
  ('params -> param_list','params',1,'p_params','makeParser.py',63),
  ('params -> VOID','params',1,'p_params','makeParser.py',64),
  ('param_list -> param_list COMA param','param_list',3,'p_param_list','makeParser.py',69),
  ('param_list -> param','param_list',1,'p_param_list','makeParser.py',70),
  ('param -> type_specifier ID','param',2,'p_param','makeParser.py',77),
  ('param -> type_specifier ID LBRACKET RBRACKET','param',4,'p_param','makeParser.py',78),
  ('compound_stmt -> LKEY local_declarations statement_list RKEY','compound_stmt',4,'p_compound_stmt','makeParser.py',87),
  ('local_declarations -> local_declarations var_declaration','local_declarations',2,'p_local_declarations','makeParser.py',91),
  ('local_declarations -> empty','local_declarations',1,'p_local_declarations','makeParser.py',92),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','makeParser.py',99),
  ('statement_list -> empty','statement_list',1,'p_statement_list','makeParser.py',100),
  ('statement -> expression_stmt','statement',1,'p_statement','makeParser.py',106),
  ('statement -> compound_stmt','statement',1,'p_statement','makeParser.py',107),
  ('statement -> selection_stmt','statement',1,'p_statement','makeParser.py',108),
  ('statement -> iteration_stmt','statement',1,'p_statement','makeParser.py',109),
  ('statement -> return_stmt','statement',1,'p_statement','makeParser.py',110),
  ('expression_stmt -> expression SEMICOLON','expression_stmt',2,'p_expression_stmt','makeParser.py',115),
  ('expression_stmt -> SEMICOLON','expression_stmt',1,'p_expression_stmt','makeParser.py',116),
  ('selection_stmt -> IF LPAREN expression RPAREN statement','selection_stmt',5,'p_selection_stmt','makeParser.py',123),
  ('selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement','selection_stmt',7,'p_selection_stmt','makeParser.py',124),
  ('iteration_stmt -> WHILE LPAREN expression RPAREN statement','iteration_stmt',5,'p_iteration_stmt','makeParser.py',131),
  ('return_stmt -> RETURN SEMICOLON','return_stmt',2,'p_return_stmt','makeParser.py',135),
  ('return_stmt -> RETURN expression SEMICOLON','return_stmt',3,'p_return_stmt','makeParser.py',136),
  ('expression -> var ASSIGN expression','expression',3,'p_expression','makeParser.py',143),
  ('expression -> simple_expression','expression',1,'p_expression','makeParser.py',144),
  ('var -> ID','var',1,'p_var','makeParser.py',151),
  ('var -> ID LBRACKET expression RBRACKET','var',4,'p_var','makeParser.py',152),
  ('simple_expression -> additive_expression relop additive_expression','simple_expression',3,'p_simple_expression','makeParser.py',160),
  ('simple_expression -> additive_expression','simple_expression',1,'p_simple_expression','makeParser.py',161),
  ('relop -> LOEQU','relop',1,'p_relop','makeParser.py',168),
  ('relop -> LTHAN','relop',1,'p_relop','makeParser.py',169),
  ('relop -> MTHAN','relop',1,'p_relop','makeParser.py',170),
  ('relop -> MOEQU','relop',1,'p_relop','makeParser.py',171),
  ('relop -> EQUALS','relop',1,'p_relop','makeParser.py',172),
  ('relop -> DIFF','relop',1,'p_relop','makeParser.py',173),
  ('additive_expression -> additive_expression addop term','additive_expression',3,'p_additive_expression','makeParser.py',178),
  ('additive_expression -> term','additive_expression',1,'p_additive_expression','makeParser.py',179),
  ('addop -> PLUS','addop',1,'p_addop','makeParser.py',186),
  ('addop -> MINUS','addop',1,'p_addop','makeParser.py',187),
  ('term -> term mulop factor','term',3,'p_term','makeParser.py',192),
  ('term -> factor','term',1,'p_term','makeParser.py',193),
  ('mulop -> TIMES','mulop',1,'p_mulop','makeParser.py',200),
  ('mulop -> DIVIDE','mulop',1,'p_mulop','makeParser.py',201),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','makeParser.py',206),
  ('factor -> var','factor',1,'p_factor','makeParser.py',207),
  ('factor -> call','factor',1,'p_factor','makeParser.py',208),
  ('factor -> NUM','factor',1,'p_factor','makeParser.py',209),
  ('call -> ID LPAREN args RPAREN','call',4,'p_call','makeParser.py',216),
  ('args -> arg_list','args',1,'p_args','makeParser.py',220),
  ('args -> empty','args',1,'p_args','makeParser.py',221),
  ('arg_list -> arg_list COMA expression','arg_list',3,'p_arg_list','makeParser.py',227),
  ('arg_list -> expression','arg_list',1,'p_arg_list','makeParser.py',228),
  ('empty -> <empty>','empty',0,'p_empty','makeParser.py',235),
]
